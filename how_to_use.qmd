# Getting Started {#sec-how-to-use}

## Structure of platform
The platform starts off with a general introduction the numerical simulation of economic models (@sec-how-to-simulate). 

After that, it jumps right into a series of macroeconomic models. These models are grouped into static and dynamic models. In static models, time plays no role and all variables adjust instantaneously. By contrast, dynamic models characterise the adjustment of variables over time. 

For each model, the chapters provide three main components:

1. **Model descriptions** that concisely explain the key ideas, assumptions, and equations of each model. This helps users grasp the underlying concepts and intuition behind the models.
2. **Annotated code** that allows users to numerically simulate the models, examine their results under different scenarios, and produce visualisations to better understand the models' structure and output. This hands-on approach enables users to gain practical coding skills while exploring different macroeconomic theories.
3. **Analytical discussions** for users who are interested in delving deeper into the mathematical properties of the models.

To further facilitate the understanding of dynamic models, @sec-stab_analysis of the section on dynamic models begins with a general introduction into the  mathematical analysis of dynamic models (this is mostly relevant for the analytical discussions of dynamic models).

## Access and introduction to *R*
All simulation codes are written in the open-source programming language *R* (a Python extension is planned). To be able to manipulate the codes on this platform on your own machine, you first need to [download and install *R* and *RStudio*](https://rstudio-education.github.io/hopr/starting.html). 

Besides being free, a key advantage of *R* is its huge and growing functionality due to new user-written packages continuously being added. In addition, a large amount of learning material is freely available on the web, e.g. [here](https://education.rstudio.com/learn/beginner/) and [here](https://www.w3schools.com/r/default.asp). However, to get started in can be best to directly delve into some of the codes on this platform and learn by doing. To this end, the following "cheatsheets" that provide a concise overview of key functions are useful:

- [R Studio Cheatsheet](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)

- [Base R Cheatsheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf)

- [more cheatsheets here](https://posit.co/resources/cheatsheets/)

Once you have installed *R* and *RStudio*, you can play with the codes on this platform yourself by copy and pasting them into the script panel of your local *RStudio* and hitting CTRL + Enter to execute them. Don't forget to always comment your code using the "#" symbol and to save your *RScript* to make sure your future self can seamlessness continue working on it.


The following code covers some basic *R* operations.^[We are grateful to Rafael Wildauer for permission to reproduce a slightly modified version of his learning materials. In addition, some of the material below is taken from [here](https://www.w3schools.com/r/default.asp).]. If you are new to *R* and are keen to get started, do the following:

- copy the code above into the script panel of RStudio on your machine
- adjust the working directory to your personal folder
- then run the code 
- make sure you understand what it does

```{r}
#| output: false
################################### R Basics ###########################

#In the R script you write code and comments
  #any line starting with # is a comment and it is NOT executed

## First things first: set the working directory to the the folder in which your R files are stored using: setwd("C:/")
# note that you need to separate folders by slashes /

#Let's define some variables
s = 0.05
Y = 10

#We can also assign several variables the same value at once
C = I = R = 2

#For displaying them we simply call the name of the object and execute the relevant line
Y
C

#We can define new variables using existing ones
W = Y - R
W

#R has a vast amount of built in functions, for example
max(10,2,100,-3)
sqrt(9)
abs(-13)

#you can find out more about these by using the help function, e.g.:?max()

#How can you delete stuff? Use the remove function rm()
#for individual objects
rm(Y)
#if you want to remove everything
rm(list=ls(all=TRUE))

#You can also assign text (a string) to a variable
text1 = 'Reggaeton'
text2 = "Bad Bunny"
#note "text" is the same as 'text' and a string can contain spaces
#You use the paste function to combine strings
paste(text1, text2)

#R uses standard operators like +, -, *
#for exponents use ^
3^2


########################### if statements and loops ######################

#sometimes we need to introduce if conditions into our code
#The syntax is
#if condition { do something }
a = 10
b = 13
if (b>a) {
  print("b is bigger")
}
#we can also tell R what to do in case the condition is not fulfilled
b=10
if (b>a) {
  print("b is bigger")
} else {
  print("b not bigger")
}


#Next we will look at loops which are a key tool to repeat tasks such as solving
#a theoretical model again and again to find its equilibrium.
#The basic structure is:
for (i in 1:5){
  print(i)
}

#Let's use it to solve a simple Keynesian cross model of the form
#Y=C+I
#C=c0+c1Y
#Define exogenous parameters
c0=2
c1=0.8
I=10
#set initial values for two endogenous variable
Y=C=1
#Use a for loop to solve it
C
Y
for (i in 1:100){
  Y = C+I
  C = c0+c1*Y
}
C
Y
#solution is Y=(I+c0)/(1-c1)=60

#What is special about this loop is that it uses the values from the previous iteration
#to define the values of the next, because it starts with assigning a value to Y
#and then uses that value to assign a new value to C and in the next iteration it
#uses this new value for C to define a new value for Y etc.


########################### Data structures ##########################
#In most applications we produce outputs which do not consist of a single number.
#Often we have an entire stream of results, or we want to analyse data and have to store larger amounts of data
#R has a variety of data structures for this purpose.
#let's clean up first
rm(list=ls(all=TRUE))

####Vectors 
#We can create an empty vector and fill it later (with results of our model for example)
vec1 = vector(length=3)
#we can define vectors explicitly using the c() function (c for column?)
vec2 = c(1,2,3)
vec3 = c(6,7,8)
#we can also use the sequence operator
vec4 = 1:10
#and we can define the step size
vec5 = seq(1,2,0.1)
vec5
#we can call specific entries using square brackets
vec5[4]
#if we want to access more elements at once
vec5[c(4,1)]

####Matrices
#define a matrix: 3 rows and 2 columns, all elements equal to 0
mat1 = matrix(0, nrow=3, ncol=2)
mat1
#we can also fill it with specific values
mat2 = matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
mat2
#access specific elements (columns,rows)
mat2[3,1]
#access entire rows or columns
mat2[,1]
mat2[1,]
#access sub matrices
mat2[c(1,2),]
## Combine two column vectors in a matrix
mat3=cbind(vec1, vec2)
mat3
## Combine two row vectors in a matrix
mat4=rbind(vec1, vec2)
mat4
```

## Simple *R* exercise 
If you further want to practice your coding skills, attempt the following exercises:

1. Write a loop which calculates the running sum of $x_i=\frac{1}{i^2}$ by saving each element $\sum_{i=1}^{j}x_i$ in a vector (where $j=1,2,..,10$).

If your code is correct, you should get the solution:

::: {.callout-tip collapse="true" title="Solution"}

```{r}
#| echo: false
#| output: true

#################################### Exercise 1 #########################################

# Clear environment
rm(list=ls(all=TRUE))


#Define empty vector of length 10 where we save results
x = vector(length = 10)

#Initialise x for i=1
x[1]=1

# then define loop for i= 2,..10
for (i in 2:10){
    x[i] = x[i-1] + 1/i^2 
}

# Print result
x

```

:::

2. Write a loop which calculates the running sums of $x_i=\frac{1}{i^2}$ (as in exercise 1) and in addition also $y_i=\frac{1}{i^3}$. Combine the results in a matrix.


If your code is correct, you should get the solution:

::: {.callout-tip collapse="true" title="Solution"}

```{r}
#| echo: false
#| output: true

################################## Exercise 2 ##########################################
# Clear environment
rm(list=ls(all=TRUE))

#Define empty vector of length 10 where we save results
x = vector(length = 10)
y = vector(length = 10)

#Initialise x ad y for i=1
x[1]=y[1]=1

# then define loop for i= 2,..10
for (i in 2:10){
  x[i] = x[i-1] + 1/i^2 
  y[i]= y[i-1] + 1/i^3
}

# Combine vectors in a matrix
mat=cbind(x,y)

# Print result
mat
```

:::


 
 




