# A New Keynesian 3-Equation Model {#sec-NK}

## Overview

New Keynesian dynamic general equilibrium models were developed in the 1990s and 2000s to guide monetary policy.[^a_new_keynesian_3_equation_model-1] They build on real business cycle models with rational expectations but introduce Keynesian frictions such as imperfect competition and nominal rigidities. While the structural forms of these models are typically complex as behavioural functions are derived from the intertemporal optimisation, the reduced-form of the benchmark models can be represented by three main equations: (i) an IS curve, (ii) a Phillips curve, (iii) and an interest rate rule.

[^a_new_keynesian_3_equation_model-1]: See @gali_state_2018 for an overview.

The IS curve establishes a negative relationship between real income and the real interest rate. For a higher real interest rate, households will save more and thus consume less. The Phillips curve models inflation as a function of the output gap. A positive output gap (an economic expansion) leads to higher inflation. The monetary policy rule specifies how the central bank reacts to deviations of actual inflation from a politically determined inflation target.

The simplified version of the 3-equation model we consider here is directly taken from chapter 3 of @Carlin2014.^[A PDF version of the most 2024 edition of the book is freely available [here](https://www.stone-econ.org/resources/free-textbook-in-intermediate-macroeconomics).] This is a short-run model in which prices are flexible but the capital stock is fixed. The focus is thus on goods market equilibrium rather than economic growth. In the Carlin-Soskice version, inflation expectations are assumed to be adaptive and the response of aggregate demand to a change in the interest rate is sluggish. This renders the model dynamic.[^a_new_keynesian_3_equation_model-2]

[^a_new_keynesian_3_equation_model-2]: Note that this is quite different from conventional New Keynesian dynamic stochastic general equilibrium (DSGE) models in which the dynamic element stems from agents with rational expectations that react to serially correlated shocks. See chapter 16 of @Carlin2014 for a comparison of their 3-equation model with New Keynesian DSGE models.]

## The model

$$
y_t=A -a_1r_{t-1}
$$ {#eq-nk_y}

$$
\pi_t=\pi_{t-1}+a_2(y_t -y_e)
$$ {#eq-nk_pi}

$$
r_s=\frac{(A - y_e)}{a_1}
$$ {#eq-nk_rs}

$$
r_t = r_s + a_3(\pi_t-\pi^T)
$$ {#eq-nk_r}

where $y$, $A$, $r$, $\pi$, $y_e$, $r_s$, and $\pi^T$ are real output, autonomous demand (times the multiplier), the real interest rate, inflation, equilibrium output, the stabilising real interest rate, and the inflation target, respectively.

@eq-nk_y is the IS curve or goods market equilibrium condition. Aggregate output adjusts to the level of aggregate demand, which is given by autonomous demand (times the multiplier) and a component that is negatively related to the (lagged) real interest rate via households' saving ($a_1>0$). @eq-nk_pi is the Phillips curve. It is assumed that inflation is driven by adaptive expectations ($E[\pi_{t}]=\pi_{t-1}$) and positively related to the output gap $(y_t-y_e)$, i.e. $a_2>0$. By @eq-nk_rs, the stabilising real interest rate is that real interest rate that is consistent with equilibrium output ($y_e=A -a_1r_s$). Finally, the interest rate rule in @eq-nk_r specifies the real interest rate the central bank needs to set to minimise its loss function (see @sec-analytical below for a derivation). The parameter $a_3$ is a composite one given by $a_3 = \frac{1}{a_1(\frac{1}{a_2 b} + a_2)} >0$. Although the central bank only sets the nominal interest rate $i = r + E[\pi_{t}]$ directly, the fact that expected inflation is predetermined in every period allows it to indirectly control the real interest rate.

## Simulation

### Parameterisation

Table 1 reports the parameterisation used in the simulation. For all parameterisations, the system is initialised at the equilibrium $(y^*,\pi^*,r^*)=(y_e,\pi^T, r_s)$. Three scenarios will then be considered. In scenario 1, there is an increase in autonomous aggregate demand ($A$). In scenario 2, the central bank sets a higher inflation target ($\pi^T$). Scenario 3 considers a rise in equilibrium output ($y_e$).

**Table 1: Parameterisation**

| Scenario                              | $a_1$ | $a_2$ | $b$ | $A$ | $\pi^T$ | $y_e$ |
|---------------------------------------|-------|-------|-----|---- |---------|-------|
| 1: rise in aggregate demand ($A$)     | 0.3   | 0.7   | 1   | 7   | 2       | 5     |
| 2: higher inflation target ($\pi^T$)  | 0.3   | 0.7   | 1   | 6   | 3       | 5     |
| 3: rise in equilibrium output ($y_e$) | 0.3   | 0.7   | 1   | 6   | 2       | 5.5   |

### Simulation code

```{r nk1}
#Clear the environment
rm(list=ls(all=TRUE))

# Set number of periods
Q=50

# Set number of scenarios
S=3

# Set period in which shock/shift will occur
s=5

# Create (S x Q)-matrices that will contain the simulated data
y=matrix(data=0,nrow=S,ncol=Q) # Income/output
p=matrix(data=0,nrow=S,ncol=Q) # Inflation rate
r=matrix(data=0,nrow=S,ncol=Q) # Policy rate
rs=matrix(data=0,nrow=S,ncol=Q) # Stabilising interest rate

# Set constant parameter values
a1=0.3  # Sensitivity of inflation with respect to output gap 
a2=0.7  # Sensitivity of output with respect to interest rate
b=1     # Sensitivity of central bank to inflation gap
a3=(a1*(1/(b*a2) + a2))^(-1)

# Set parameter values for different scenarios
A=matrix(data=6,nrow=S,ncol=Q) # autonomous spending
pt=matrix(data=2,nrow=S,ncol=Q) # Inflation target
ye=matrix(data=5,nrow=S,ncol=Q) # Potential output

A[1,s:Q]=7  # scenario 1: AD boost  
pt[2,s:Q]=3  # scenario 2: higher inflation target
ye[3,s:Q]=5.5  # scenario 3: higher potential output

# Initialise endogenous variables at equilibrium values
y[,1]=ye[,1]
p[,1]=pt[,1]
rs[,1]=(A[,1] - ye[,1])/a1 
r[,1]=rs[,1]

# Simulate the model by looping over Q time periods for S different scenarios
for (i in 1:S){
  
  for (t in 2:Q){
    
    #(1) IS curve
    y[i,t] = A[i,t] - a1*r[i,t-1]
    
    #(2) Phillips Curve
    p[i,t] = p[i,t-1] +a2*(y[i,t]-ye[i,t])
    
    #(3) Stabilising interest rate
    rs[i,t] = (A[i,t] - ye[i,t])/a1
    
    #(4) Monetary policy rule, solved for r
    r[i,t] = rs[i,t] + a3*(p[i,t]-pt[i,t])
  
  } # close time loop
}   # close scenarios loop
```

::: {.callout-note collapse="true" title="Python code"}

```{r}
#| echo: false
#| output: false
#| collapse: true

library(reticulate)
use_python("C:/Users/Karsten Kohler/anaconda3/python.exe", required = TRUE)
#py_install("matplotlib")
#py_config()
#py_install("numpy")
```

```{python}
#| echo: true
#| output: false
#| collapse: true

import numpy as np

# Set number of periods
Q = 50

# Set number of scenarios
S = 3

# Set period in which shock/shift will occur
s = 5

# Create (S x Q) arrays to store simulated data
y = np.zeros((S, Q))  # Income/output
p = np.zeros((S, Q))  # Inflation rate
r = np.zeros((S, Q))  # Policy rate
rs = np.zeros((S, Q))  # Stabilizing interest rate

# Set constant parameter values
a1 = 0.3  # Sensitivity of inflation with respect to output gap
a2 = 0.7  # Sensitivity of output with respect to interest rate
b = 1     # Sensitivity of the central bank to inflation gap
a3 = (a1 * (1 / (b * a2) + a2)) ** (-1)

# Set parameter values for different scenarios
A = np.full((S, Q), 6)  # Autonomous spending
pt = np.full((S, Q), 2)  # Inflation target
ye = np.full((S, Q), 5)  # Potential output

A[0, s:Q] = 7  # Scenario 1: AD boost
pt[1, s:Q] = 3  # Scenario 2: Higher inflation target
ye[2, s:Q] = 5.5  # Scenario 3: Higher potential output

# Initialize endogenous variables at equilibrium values
y[:, 0] = ye[:, 0]
p[:, 0] = pt[:, 0]
rs[:, 0] = (A[:, 0] - ye[:, 0]) / a1
r[:, 0] = rs[:, 0]

# Simulate the model by looping over Q time periods for S different scenarios
for i in range(S):
    for t in range(1, Q):
        # (1) IS curve
        y[i, t] = A[i, t] - a1 * r[i, t - 1]
        # (2) Phillips Curve
        p[i, t] = p[i, t - 1] + a2 * (y[i, t] - ye[i, t])
        # (3) Stabilizing interest rate
        rs[i, t] = (A[i, t] - ye[i, t]) / a1
        # (4) Monetary policy rule, solved for r
        r[i, t] = rs[i, t] + a3 * (p[i, t] - pt[i, t])

```

:::

### Plots

Figures @fig-nk-output - @fig-nk-policyrate depict the response of the model's key endogenous variables to various shifts. A permanent rise in aggregate demand (scenario 1) has an instantaneous expansionary effect on output, but also pushes inflation above the target. This induces the central bank to raise the interest rate, which brings down output below equilibrium in the next period. The central bank then gradually lowers the policy rate towards its new higher equilibrium value, where inflation is again stabilised at its target level.


```{r}
#| label: fig-nk-output
#| fig-cap: Output under different scenarios

### Plot results

# Set maximum period for plots
Tmax=15

# Output under different scenarios
plot(y[1, 1:(Tmax+1)],type="l", col=1, lwd=2, lty=1, xlab="", xlim=range(2:(Tmax)), ylab="y", ylim=range(y[1, 1:Tmax],y[3, 1:(Tmax)])) 
title(main="Output", xlab = "Time",cex=0.8 ,line=2)
lines(y[2, 1:(Tmax+1)],lty=2, lwd=2)
lines(y[3, 1:(Tmax+1)],lty=3, lwd=2)
legend("bottomright", legend=c("1: aggregate demand boost", "2: rise inflation target", "3: rise potential output"), lty=1:3, cex=0.8, bty = "n", y.intersp=0.8)
```

```{r}
#| label: fig-nk-inflation
#| fig-cap: Inflation under different scenarios

# Inflation under different scenarios
plot(p[1, 1:(Tmax+1)],type="l", col=1, lwd=2, lty=1, xlab="", xlim=range(2:(Tmax)), ylab=expression(pi), ylim=range(p[, 2:Tmax])) 
title(main="Inflation", xlab = "Time",cex=0.8 ,line=2)
lines(p[2, 1:(Tmax+1)],lty=2, lwd=2)
lines(p[3, 1:(Tmax+1)],lty=3, lwd=2)
legend("bottomright", legend=c("1: aggregate demand boost", "2: rise inflation target", "3: rise potential output"), lty=1:3, cex=0.8, bty = "n", y.intersp=0.8)
```

```{r}
#| label: fig-nk-policyrate
#| fig-cap: Policy rate under different scenarios

# Policy rate under different scenarios
plot(r[1, 1:(Tmax+1)],type="l", col=1, lwd=2, lty=1, xlab="", xlim=range(2:(Tmax)), ylab="r", ylim=range(r[, 2:Tmax])) 
title(main="Policy rate", xlab = "Time",cex=0.8 ,line=2)
lines(r[2, 1:(Tmax+1)],lty=2, lwd=2)
lines(r[3, 1:(Tmax+1)],lty=3, lwd=2)
legend("right", legend=c("1: aggregate demand boost", "2: rise inflation target", "3: rise potential output"), lty=1:3, cex=0.8, bty = "n", y.intersp=0.8)
```

::: {.callout-note collapse="true" title="Python code"}

```{python}
#| echo: true
#| output: false
#| collapse: true

import matplotlib.pyplot as plt

# Set maximum period for plots
Tmax = 15

# Plot output under different scenarios
plt.figure(figsize=(8, 6))
plt.plot(y[0, :Tmax + 1], label="Scenario 1: aggregate demand boost",
         color='k', linestyle='solid', linewidth=2)
plt.plot(y[1, :Tmax + 1], label="Scenario 2: Rise inflation target",
         color='k', linestyle='dashed', linewidth=2)
plt.plot(y[2, :Tmax + 1], label="Scenario 3: Rise potential output",
         color='k', linestyle='dotted', linewidth=2)

plt.title("Output under Different Scenarios")
plt.xlabel("Time")
plt.ylabel("y")
plt.xlim(1, Tmax)
plt.ylim(np.min(y), np.max(y))
plt.legend()
plt.show()

```

:::

An increase in the central bank's inflation target (scenario 2) gradually raises the inflation rate to a new level. During the adjustment period, the interest rate falls, which temporarily allows for a higher level of output. However, there is no permanent expansionary effect.

By contrast, an increase in potential or equilibrium output (scenario 3) allows for a permanently higher level of output and a lower real interest rate.

## Introducing rational inflation expectations
How do the predictions of the model change when assuming that private actors have rational instead of adaptive inflation expectations? The Phillips curve, @eq-nk_pi of the model, assumes adaptive expectations: $E[\pi_{t}]=\pi_{t-1}$. Following chapter 4 of @Carlin2014, a (simplified) way of introducing rational inflation expectations is to assume $E[\pi_{t}]=\pi^T$, i.e. rational agents know the central bank's inflation target and assume that future inflation will (on average) be equal to the inflation target. The central bank will only be able to credibly commit to this target if it can deliver $y_t=y_e$ in expectation. This, in turn, requires output to respond instantaneously to the interest rate, so that the IS curve becomes: $y_t=A -a_1r_{t}$.^[The IS curve in the Carlin-Soskice version of the 3-equation model is only loosely based on intertemporal optimisation (see analytical discussion section below). A rigorously derived IS-curve in a New Keynesian model with forward-looking expectations would contain the future expected output gap and expected inflation, see @gali_state_2018.] 

We simulate the model for both adaptive and rational inflation expectations to see how the economy reacts to a one-off 5-percentage point inflationary shock occurring in $t=5$.

```{r}
#Clear the environment
rm(list=ls(all=TRUE))

# Set number of periods
Q=50

# Set number of scenarios (here: comparison of adaptive and rational expectations)
S=2

# Set period in which shock/shift will occur
s=5

# Create (S x Q)-matrices that will contain the simulated data
y=matrix(data=0,nrow=S,ncol=Q) # Income/output
p=matrix(data=0,nrow=S,ncol=Q) # Inflation rate
r=matrix(data=0,nrow=S,ncol=Q) # Policy  rate

# Set constant parameter values
a1=0.3  # Sensitivity of inflation with respect to output gap 
a2=0.7  # Sensitivity of output with respect to interest rate
b=1     # Sensitivity of central bank to inflation gap
a3=(a1*(1/(b*a2) + a2))^(-1)
A=6 # autonomous spending
pt=2 # Inflation target
ye=5 # Potential output
rs=(A - ye)/a1 # Stabilising interest rate

# Initialise endogenous variables at equilibrium values
y[,1]=ye
p[,1]=pt
r[,1]=rs

# create a temporary inflation shock in period s
eps=matrix(data=0,nrow=S,ncol=Q) # inflation shock
eps[,s]=5

### Simulate adaptive expectations version of the model with an inflationary shock in t=s
# Use i=1 for adaptive expectations version
i=1

for (t in 2:Q){
  
      # IS curve (with lagged interest rate)
      y[i,t] = A - a1*r[i,t-1]

      # Adaptive expectations Phillips Curve
      p[i,t] = p[i,t-1] + a2 * (y[i,t] - ye) + eps[i,t]

      # Monetary policy rule
      r[i,t] = rs + a3*(p[i,t]-pt)

} # close time loop

### Simulate rational expectations version of the model with an inflationary shock in t=s
# Use i=2 for rational expectations version
i=2

for (t in 2:Q){
     
   # Needs within-period iterations loop due to contemporaneous interest rate in the IS curve
    for (iterations in 1:100){
  
      # IS curve (with contemporaneous interest rate)
      y[i,t] = A - a1*r[i,t]
        
      # Rational expectations Phillips Curve 
      p[i,t] = pt + a2 * (y[i,t] - ye) + eps[i,t]
    
      # Monetary policy rule
      r[i,t] = rs + a3*(p[i,t]-pt)
  
  } # close iterations loop
}  # close time loop
```


```{r}
#| label: fig-nk-inflation-ra
#| fig-cap: Response of inflation to inflationary shock, different expectations

# Set maximum period for plots
Tmax = 15

# Inflation under adaptive vs rational expectations
plot(p[1, 1:(Tmax+1)],type="l", col=1, lwd=2, lty=1, xlab="", xlim=range(2:(Tmax)), ylab=expression(pi), ylim=range(p[, 2:Tmax])) 
title(main="Inflation", xlab = "Time",cex=0.8 ,line=2)
lines(p[2, 1:(Tmax+1)],lty=2, lwd=2)
legend("topright", legend=c("1: Adaptive expectations", "2: Rational expectations"), lty=1:2, cex=0.8, bty = "n", y.intersp=0.8)

```

```{r}
#| label: fig-nk-polcyrate-ra
#| fig-cap: Response of central bank to inflationary shock, different expectations

# Policy rate under adaptive vs rational expectations
plot(r[1, 1:(Tmax+1)],type="l", col=1, lwd=2, lty=1, xlab="", xlim=range(2:(Tmax)), ylab="r", ylim=range(r[, 2:Tmax])) 
title(main="Policy rate", xlab = "Time",cex=0.8 ,line=2)
lines(r[2, 1:(Tmax+1)],lty=2, lwd=2)
legend("topright", legend=c("1: Adaptive expectations", "2: Rational expectations"), lty=1:2, cex=0.8, bty = "n", y.intersp=0.8)

```

::: {.callout-note collapse="true" title="Python code"}

```{python}
#| echo: true
#| output: false
#| collapse: true

# Set number of periods
Q = 50

# Set number of scenarios (here: comparison of adaptive and rational expectations)
S = 2

# Set period in which shock/shift will occur
s = 5

# Create (S x Q)-matrices that will contain the simulated data
y = np.zeros((S, Q))  # Income/output
p = np.zeros((S, Q))  # Inflation rate
r = np.zeros((S, Q))  # Policy rate

# Set constant parameter values
a1 = 0.3  # Sensitivity of inflation with respect to output gap 
a2 = 0.7  # Sensitivity of output with respect to interest rate
b = 1     # Sensitivity of central bank to inflation gap
a3 = (a1 * (1 / (b * a2) + a2))**(-1)
A = 6     # Autonomous spending
pt = 2    # Inflation target
ye = 5    # Potential output
rs = (A - ye) / a1  # Stabilising interest rate

# Initialise endogenous variables at equilibrium values
y[:, 0] = ye
p[:, 0] = pt
r[:, 0] = rs

# Create a temporary inflation shock in period s
eps = np.zeros((S, Q))  # inflation shock
eps[:, s] = 5

# ----------------------------
# Simulate adaptive expectations version of the model with an inflationary shock in t=s
# Use i=0 for adaptive expectations version
# ----------------------------
i = 0

for t in range(1, Q):  # Python is 0-based, so start at 1 for the 2nd period
    
    # IS curve (with lagged interest rate)
    y[i, t] = A - a1 * r[i, t-1]

    # Adaptive expectations Phillips Curve
    p[i, t] = p[i, t-1] + a2 * (y[i, t] - ye) + eps[i, t]

    # Monetary policy rule
    r[i, t] = rs + a3 * (p[i, t] - pt)

# ----------------------------
# Simulate rational expectations version of the model with an inflationary shock in t=s
# Use i=1 for rational expectations version
# ----------------------------
i = 1

for t in range(1, Q):
    
    # Needs within-period iterations loop due to contemporaneous interest rate in the IS curve
    for _ in range(100):  # iteration loop
      
        # IS curve (with contemporaneous interest rate)
        y[i, t] = A - a1 * r[i, t]
        
        # Rational expectations Phillips Curve 
        p[i, t] = pt + a2 * (y[i, t] - ye) + eps[i, t]
    
        # Monetary policy rule
        r[i, t] = rs + a3 * (p[i, t] - pt)


## Plot results
import matplotlib.pyplot as plt

# Set maximum period for plots
Tmax = 15

# Inflation under adaptive vs rational expectations
plt.figure(figsize=(7, 5))

# Adaptive expectations (i=0)
plt.plot(range(Tmax+1), p[0, 0:Tmax+1], 
         color="black", linewidth=2, linestyle="-", label="1: Adaptive expectations")

# Rational expectations (i=1)
plt.plot(range(Tmax+1), p[1, 0:Tmax+1], 
         color="black", linewidth=2, linestyle="--", label="2: Rational expectations")

# Titles and labels
plt.title("Inflation", fontsize=12)
plt.xlabel("Time", fontsize=10)
plt.ylabel(r"$\pi$", fontsize=12)

# Legend
plt.legend(loc="upper right", fontsize=9, frameon=False)

# Tight layout for nicer spacing
plt.tight_layout()
plt.show()

# Policy rate under adaptive vs rational expectations
plt.figure(figsize=(7, 5))

# Adaptive expectations (i=0)
plt.plot(range(Tmax+1), r[0, 0:Tmax+1], 
         color="black", linewidth=2, linestyle="-", label="1: Adaptive expectations")

# Rational expectations (i=1)
plt.plot(range(Tmax+1), r[1, 0:Tmax+1], 
         color="black", linewidth=2, linestyle="--", label="2: Rational expectations")

# Titles and labels
plt.title("Policy rate", fontsize=12)
plt.xlabel("Time", fontsize=10)
plt.ylabel("r", fontsize=12)

# Legend
plt.legend(loc="upper right", fontsize=9, frameon=False)

# Tight layout for nicer spacing
plt.tight_layout()
plt.show()

```

:::

It can be seen that under rational inflation expectations, the economy is less sensitive to shocks and returns to equilibrium much quicker. The job of the central bank is simpler: it only needs to raise the interest rate in the period the shock occurs to bring the economy back on target in the next period. Compared to adaptive expectations, a less drastic reponse is required.


## Directed graph

Another perspective on the model's properties is provided by its directed graph. A directed graph consists of a set of nodes that represent the variables of the model. Nodes are connected by directed edges. An edge directed from a node $x_1$ to node $x_2$ indicates a causal impact of $x_1$ on $x_2$.

```{r nk3, message=FALSE}
# Construct auxiliary Jacobian matrix for 7 variables: y, p, r, A, ye, rs, pt
# where non-zero elements in regular Jacobian are set to 1 and zero elements are unchanged

M_mat=matrix(c(0,0,1,1,0,0,0,
               1,0,0,0,1,0,0,
               0,1,0,0,0,1,1,
               0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,
               0,0,0,1,1,0,0,
               0,0,0,0,0,0,0),7,7, byrow=TRUE)

# Create adjacency matrix from transpose of auxiliary Jacobian and add column names
A_mat=t(M_mat)

# Create directed graph from adjacency matrix
library(igraph)
dg=graph_from_adjacency_matrix(A_mat, mode="directed", weighted=NULL)

# Define node labels
V(dg)$name=c("y", expression(pi), "r", "A", expression(y[e]),expression(r[s]), expression(pi^T))

# Plot directed graph
plot(dg, main="Figure 4: Directed graph of 3-Equation model", vertex.size=20, vertex.color="lightblue", 
     vertex.label.color="black", edge.arrow.size=0.3, edge.width=1.1, edge.size=1.2,
     edge.arrow.width=1.2, edge.color="black", vertex.label.cex=1.2, 
     vertex.frame.color="NA", margin=-0.08)
```

::: {.callout-note collapse="true" title="Python code"}

```{python}
#| echo: true
#| output: false
#| collapse: true

# Directed graph
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np


# Define the Jacobian matrix
M_mat = np.array([[0, 0, 1, 1, 0, 0, 0],
                  [1, 0, 0, 0, 1, 0, 0],
                  [0, 1, 0, 0, 0, 1, 1],
                  [0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 1, 1, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0],
                 ])

# Create adjacency matrix from transpose of auxiliary Jacobian and add column names
A_mat = M_mat.transpose()

# Create the graph from the adjacency matrix
G = nx.DiGraph(A_mat)

# Define node labels
nodelabs = {
    0: "y",
    1: "π",
    2: "r",
    3: "A",
    4: "yₑ",
    5: "rₛ",
    6: "πᵀ"
}

# Plot the directed graph
pos = nx.spring_layout(G, seed=43)  
nx.draw(G, pos, with_labels=True, labels=nodelabs, node_size=300, node_color='lightblue', 
        font_size=10)
edge_labels = {(u, v): '' for u, v in G.edges}
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='black')
plt.axis('off')
plt.show()

```

:::

In Figure 4, it can be seen that aggregate demand ($A$), equilibrium output ($y_e$), and the inflation target ($\pi^T$) are the key exogenous variables of the model. All other variables are endogenous and form a closed loop (or cycle) within the system. The upper-right side of the graph represents the supply side, given by the equilibrium level of output and its effect on inflation. The upper-left side captures the demand side and its effect on actual output. The key endogenous variables, output, inflation, and the interest rate form the centre of the graph, where they stand in a triangular relationship to each other. Output drives inflation, which in turn impacts the real interest rate. The latter then feeds back into output. Structural changes in the relationship between demand and supply (e.g. excess demand) also impact the system through their effect on the stabilising interest rate ($r_s$).

## Analytical discussion {#sec-analytical}

### Derivation of core equations

#### IS curve

The IS curve in @eq-nk_y is loosely based on the consumption Euler equation introduced in @sec-neoclassical-model. Suppose there are two periods and the household maximises its utility function $U=\ln(C_t) + \beta \ln(C_{t+1})$ subject to the intertemporal budget constraint $C_t+\frac{C_{t+1}}{1+r}=Y_t + \frac{Y_{t+1}}{1+r}$. Substituting the constraint into the objective function and differentiating with respect to $C_t$ yields the first-order condition:

$$
C_t = \frac{C_{t+1}}{\beta(1+r)}.
$$

This consumption Euler equation establishes the negative relationship between the real interest rate and expenditures in @eq-nk_y.

#### PC curve

The Phillips curve @eq-nk_pi is derived from wage- and price-setting in imperfect labour markets.[^a_new_keynesian_3_equation_model-3] Consider the following wage- and price-setting functions: $$
\frac{W}{P^E} = B + \alpha(y_t - y_e) + z_w 
$$ $$
P=(1+\mu)\frac{W}{\lambda},
$$ {#eq-nk_P}

[^a_new_keynesian_3_equation_model-3]: See chapter 2 of @Carlin2014 for details.

i.e. the nominal wage $W$, adjusted for the expected price level, is increasing in the output gap, a factor $B$ capturing unemployment benefits and the disutility of work as well as a vector $z_w$ of wage-push factors. Prices are set based on a constant mark-up ($\mu$) on unit labour cost ($\frac{W}{\lambda}$).

In equilibrium, the real wage is given by: $w_e = B + z_w$. In a dynamic setting, wage setters will raise the expected real wage by $\left(\frac{W_t}{P_{t}^E}\right) - \left(\frac{W_{t-1}}{P_{t-1}}\right)=\alpha(y_t - y_e)$. Together with adaptive expectations for prices $\hat{P_t^E} = \hat{P}_{t-1}$ and the approximation $\hat{W_t} - \hat{P_{t-1}} \approx \left(\frac{W_t}{P_{t}^E}\right) - \left(\frac{W_{t-1}}{P_{t-1}}\right)$, this yields the following equation for wage inflation: $$
\hat{W_t} = \hat{P}_{t-1} +\alpha(y_t - y_e).
$$ {#eq-nk_W}

Transforming equation @eq-nk_P into growth rates ($\hat{P}=\hat{W}$) and combining it with the wage-inflation equation @eq-nk_W yields the Phillips curve @eq-nk_pi.

#### Monetary policy rule

Finally, to derive the interest rate rule, start from the following central bank loss function:[^a_new_keynesian_3_equation_model-4]

[^a_new_keynesian_3_equation_model-4]: See chapter 2 of @Carlin2014 for details.

$$
L=(y_t-y_e)^2 + b(\pi_t - \pi^T)^2. 
$$ Substituting the Phillips curve (@eq-nk_pi) into the loss function, differentiating with respect to $y_t$, and simplifying yields the first-order condition:

$$
y_t-y_e = -a_2b(\pi_t-\pi^T),
$$

which can also be regarded as a monetary policy rule. Next, substitute the Phillips curve (@eq-nk_pi), the IS-curve (@eq-nk_y), and the stabilising interest rate (@eq-nk_rs) into the monetary policy rule and define $a_3 = \frac{1}{a_1(\frac{1}{a_2b} + a_2)}$, which yields the interest rate rule (@eq-nk_r).

### Equilibrium solutions and stability analysis

By definition, in the steady state we have $y^*=y_e$. This implies that $r^*=r_s$. From this, it follows that $\pi^* = \pi^T$.

To analyse the dynamic stability of the model, we rewrite it as a system of first-order difference equations. To this end, substitute @eq-nk_y into @eq-nk_pi, which yields: $$
\pi_t = \pi_{t-1} + a_2(A - a_1r_{t-1}-y_e)
$$ {#eq-nk_pi_reduc}

Substitute this equation into @eq-nk_r, which yields: $$
r_t= r_{s} + a_3[\pi_{t-1} + a_2(A - a_1r_{t-1}-y_e) - \pi^T].
$$ {#eq-nk_r_reduc}

The Jacobian matrix of the system in @eq-nk_y, @eq-nk_pi_reduc, and @eq-nk_r_reduc is given by: $$
J=\begin{bmatrix} 0& 0 &-a_1 \\0 & 1 & -a_1 a_2 \\ 0 & a_3 & -a_1 a_2 a_3 \end{bmatrix}.
$$ The eigenvalues of the Jacobian can be obtained from the characteristic polynomial $\lambda^3 - Tr(J)\lambda^2 + [Det(J_1) + Det(J_2) + Det(J_3)]\lambda - Det(J) = 0$, where $Tr(J)$ and $Det(J$) are the trace and determinant, respectively, and $Det(J_i)$ refers to the $i_{th}$ principal minor of the matrix. As there is a column in the Jacobian that only contains zeros, it follows that the matrix is singular and will have a zero determinant. In addition, all principal minors turn out to be zero. The characteristic polynomial thus reduces to $\lambda^2[\lambda - Tr(J)]=0$. From this, it is immediate that $\lambda_{1,2}=0$ and $\lambda_{3}=Tr(J)$, where $Tr(J)=1-a_1a_2a_3=\frac{1}{1+a_2^2b}$. Stability requires the single real eigenvalue to be smaller than unity (in absolute terms). With $\lambda_3=\frac{1}{1+a_2^2b}$, stability thus only requires $a_2 \neq 0$ and $b>0$, i.e. the output gap needs to impact inflation (otherwise the key channel through which interest rate policy brings inflation back on target is blocked) and the central bank needs to assign a (non-negative) loss to deviations of actual inflation from its target.[^a_new_keynesian_3_equation_model-5]

[^a_new_keynesian_3_equation_model-5]: As mentioned in footnote 2, this property of the Carlin-Soskice model is very different from conventional New Keynesian models with rational expectations. In these models, variables such as output and inflation are driven by the 'forward-looking' behaviour of rational agents, i.e. they depend on expectational terms for their current values rather than lagged values. To ensure what is called 'determinancy', these forward-looking variables must adjust fast (or 'jump') to bring the economy back onto a path that is consistent with the optimising equilibrium. This requires the number of jump variables to be matched by an equal number of unstable roots (i.e. being outside the unit circle).

We can verify these analytical solutions by comparing them with the results from the numerical solution:

```{r nk4}
# Construct Jacobian matrix 
J=matrix(c(0,0,-a1,
           0,1,-a1*a2,
           0,a3,-a1*a2*a3), 3, 3, byrow=TRUE)

# Obtain eigenvalues
ev=eigen(J)
(values <- ev$values)

# Obtain determinant and trace
det(J)       # determinant
sum(diag(J)) # trace
```

::: {.callout-note collapse="true" title="Python code"}

```{python}
#| echo: true
#| output: false
#| collapse: true

import numpy as np

# Construct Jacobian matrix 
J = np.array([[0, 0, -a1],
          [0, 1, -a1 * a2],
          [0, a3, -a1 * a2 * a3],])

# Calculate eigenvalues
eigenvalues = np.linalg.eigvals(J)

# Print the resulting eigenvalues
print(eigenvalues)

# Calculate the determinant and trace of the Jacobian matrix
determinant = np.linalg.det(J)
trace = np.trace(J)
print(determinant)
print(trace)

```

:::

## References
